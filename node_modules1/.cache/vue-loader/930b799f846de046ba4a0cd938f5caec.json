{"remainingRequest":"E:\\OneDrive\\bae\\manned_parking\\02_ADMIN\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\OneDrive\\bae\\manned_parking\\02_ADMIN\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!E:\\OneDrive\\bae\\manned_parking\\02_ADMIN\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\OneDrive\\bae\\manned_parking\\02_ADMIN\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\OneDrive\\bae\\manned_parking\\02_ADMIN\\src\\components\\managementFunc\\discountTicketSalesM.vue?vue&type=template&id=106e7554&","dependencies":[{"path":"E:\\OneDrive\\bae\\manned_parking\\02_ADMIN\\src\\components\\managementFunc\\discountTicketSalesM.vue","mtime":1605765591406},{"path":"E:\\OneDrive\\bae\\manned_parking\\02_ADMIN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\OneDrive\\bae\\manned_parking\\02_ADMIN\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\OneDrive\\bae\\manned_parking\\02_ADMIN\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"E:\\OneDrive\\bae\\manned_parking\\02_ADMIN\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\OneDrive\\bae\\manned_parking\\02_ADMIN\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}